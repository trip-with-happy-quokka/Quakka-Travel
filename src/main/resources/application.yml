spring:
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: false
  batch:
    job:
      enabled: false

  datasource:
    url: ${AWS_DB_MASTER}      # 기본 데이터 소스로 설정 (master DB)
    username: ${AWS_DB_USERNAME}
    password: ${AWS_DB_PW}
    driver-class-name: com.mysql.cj.jdbc.Driver
    master:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: ${AWS_DB_MASTER}
      username: ${AWS_DB_USERNAME}
      password: ${AWS_DB_PW}

    slave:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: ${AWS_DB_SLAVE}
      username: ${AWS_DB_USERNAME}
      password: ${AWS_DB_PW_S}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME} # 이메일을 전송할 주체의 이메일 주소 (host mail)
    password: ${APP_PASSWORD} # 해당 계정으로 발급받은 App password
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  data:
    redis:
      sentinel:
        master: mymaster
        nodes:
          - ${AWS_REDIS_SENTINEL_URL}:26379
          - ${AWS_REDIS_SENTINEL_URL}:26380
          - ${AWS_REDIS_SENTINEL_URL}:26381
      timeout: 10000

  elasticsearch:
    uris: ${AWS_ELK_URL}:9200
    password: ${AWS_ELASTIC_SEARCH_PW}
    username: ${AWS_ELASTIC_SEARCH_ID} # elastic
    connection-timeout: 1s
    socket-timeout: 30s

  rabbitmq:
    host: ${AWS_RABBITMQ_URL}           # RabbitMQ host ip
    port: 5672                # RabbitMQ port
    username: guest # RabbitMQ 웹 관리 콘솔 아이디
    password: guest # RabbitMQ 웹 관리 콘솔 비밀번호

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # 클라이언트 웹 어플리케이션 식별자 (노출O)
            client-secret: ${KAKAO_CLIENT_SECRET} # 클라이언트 id 에 대한 비밀키 (절대 노출x)
            redirect-uri: http://localhost:8080/users/login/kakao
            client-authentication-method: client_secret_post
            # kakao는 인증 토큰 발급 요청 메서드가 post 이다.
            authorization-grant-type: authorization_code
            scope: # kakao 개인 정보 동의 항목 설정의 ID 값
              - profile_nickname
              - account_email
            client-name: kakao

        #kakao provider 설정
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
            # 유저 정보 조회 시 반환된느 최상위 필드명으로 해야 한다.

server:
  tomcat:
    mbeanregistry:
      enabled: true
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  port: 8080

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

payment:
  toss:
    test_client_api_key: ${TOSS_PAYMENT_CLIENT_KEY}
    test_secret_api_key: ${TOSS_PAYMENT_SECRET_KEY}
    success_url: ${TOSS_PAYMENT_SUCCESS_URL}
    fail_url: ${TOSS_PAYMENT_FAIL_URL}

management:
  endpoints:
    web:
      exposure:
       include: prometheus
  endpoint:
    prometheus:
      enabled: true

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

slack:
  webhook-url: ${SLACK_WEBHOOK_URL}

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}   # 실제 운영 환경의 AWS 액세스 키와 시크릿 키 사용
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: ${AWS_S3_BUCKET}