spring:
  batch:
    jdbc:
      initialize-schema: always  # 배치 메타데이터 테이블 자동 생성
      schema: classpath:org/springframework/batch/core/schema-mysql.sql
    job:
      enabled: false # JobLauncherApplicationRunner 비활성화

  datasource:
    master:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://${AWS_DB_URL}:3306/${AWS_DB_NAME} # quokka_travel_m
      username: ${AWS_DB_USERNAME}
      password: ${AWS_DB_PW}
    slave:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://${AWS_DB_URL}:3307/${AWS_DB_NAME}
      username: ${AWS_DB_USERNAME}
      password: ${AWS_DB_PW}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME} # 이메일을 전송할 주체의 이메일 주소 (host mail)
    password: ${APP_PASSWORD} # 해당 계정으로 발급받은 App password
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  data:
    redis:
      sentinel:
        master: mymaster
        nodes:
          - ${AWS_REDIS_SENTINEL_URL}:26379
          - ${AWS_REDIS_SENTINEL_URL}:26380
          - ${AWS_REDIS_SENTINEL_URL}:26381
      timeout: 10000

  elasticsearch:
    uris: ${AWS_ELK_URL}:9200
    password: ${AWS_ELASTIC_SEARCH_PW}
    username: ${AWS_ELASTIC_SEARCH_ID} # elastic
    connection-timeout: 1s
    socket-timeout: 30s

  rabbitmq:
    host: ${AWS_RABBITMQ_URL}           # RabbitMQ host ip
    port: 5672                # RabbitMQ port
    username: guest # RabbitMQ 웹 관리 콘솔 아이디
    password: guest # RabbitMQ 웹 관리 콘솔 비밀번호

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

slack:
  webhook-url: ${SLACK_WEBHOOK_URL}

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}   # 실제 운영 환경의 AWS 액세스 키와 시크릿 키 사용
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: ${AWS_S3_BUCKET}